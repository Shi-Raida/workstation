name: Security Scan

on:
  workflow_call:
    outputs:
      gitleaks-result:
        description: "Result of gitleaks scan"
        value: ${{ jobs.security-summary.outputs.gitleaks-result }}
      python-security-result:
        description: "Result of Python security scan"
        value: ${{ jobs.security-summary.outputs.python-security-result }}
      dependency-scan-result:
        description: "Result of dependency vulnerability scan"
        value: ${{ jobs.security-summary.outputs.dependency-scan-result }}
      overall-result:
        description: "Overall security scan result"
        value: ${{ jobs.security-summary.outputs.overall-result }}

permissions:
  actions: read
  contents: read
  security-events: write
  checks: write

jobs:
  gitleaks-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.scan.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install gitleaks
        run: |
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.21.2_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          echo "$(pwd)" >> $GITHUB_PATH
          ./gitleaks version

      - name: Run gitleaks secrets scan
        id: scan
        run: |
          echo "🔍 Scanning for secrets with gitleaks..."
          ./gitleaks detect --source . --verbose --config .gitleaks.toml --report-format json --report-path gitleaks-report.json
        continue-on-error: false

      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 7

  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.security-check.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit

      - name: Run bandit security scan
        id: security-check
        run: |
          echo "🐍 Scanning Python files with bandit..."
          find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" > python-files.txt
          if [ -s python-files.txt ]; then
            bandit -r -f json -o bandit-report.json $(cat python-files.txt) || true
            if [ -f bandit-report.json ]; then
              echo "Bandit scan completed. High/Medium severity issues:"
              cat bandit-report.json | jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM")' || echo "No high/medium security issues found"
            fi
          else
            echo "No Python files found to scan"
            echo "[]" > bandit-report.json
          fi
        continue-on-error: true

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: |
            bandit-report.json
            python-files.txt
          retention-days: 7

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.dependency-check.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: |
          pip install safety

      - name: Run safety dependency scan
        id: dependency-check
        run: |
          echo "🔒 Checking Python dependencies with safety..."
          if [ -f requirements.txt ] || [ -f setup.py ] || [ -f pyproject.toml ]; then
            safety check --json --output safety-report.json || true
            if [ -f safety-report.json ]; then
              echo "Safety scan completed. Critical vulnerabilities:"
              cat safety-report.json | jq '.vulnerabilities[] | select(.vulnerability.severity == "high")' || echo "No critical vulnerabilities found"
            fi
          else
            echo "No Python dependency files found to scan"
            echo '{"vulnerabilities": []}' > safety-report.json
          fi
        continue-on-error: true

      - name: Upload safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 7

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [gitleaks-scan, python-security, dependency-scan]
    if: always()
    outputs:
      gitleaks-result: ${{ needs.gitleaks-scan.outputs.result }}
      python-security-result: ${{ needs.python-security.outputs.result }}
      dependency-scan-result: ${{ needs.dependency-scan.outputs.result }}
      overall-result: ${{ steps.determine-result.outputs.result }}

    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-report"
          merge-multiple: true

      - name: Generate security summary
        run: |
          echo "# 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Secrets Detection Summary
          if [ -f gitleaks-report.json ]; then
            SECRETS_COUNT=$(jq length gitleaks-report.json 2>/dev/null || echo "0")
            if [ "$SECRETS_COUNT" -gt 0 ]; then
              echo "## ❌ Secrets Detection (gitleaks)" >> $GITHUB_STEP_SUMMARY
              echo "**Found $SECRETS_COUNT potential secrets!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ✅ Secrets Detection (gitleaks)" >> $GITHUB_STEP_SUMMARY
              echo "No secrets detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ⚠️ Secrets Detection (gitleaks)" >> $GITHUB_STEP_SUMMARY
            echo "No report generated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Python Security Summary
          if [ -f bandit-report.json ]; then
            PYTHON_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            if [ "$PYTHON_ISSUES" -gt 0 ]; then
              echo "## ⚠️ Python Security (bandit)" >> $GITHUB_STEP_SUMMARY
              echo "Found $PYTHON_ISSUES potential security issues" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ✅ Python Security (bandit)" >> $GITHUB_STEP_SUMMARY
              echo "No security issues detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ✅ Python Security (bandit)" >> $GITHUB_STEP_SUMMARY
            echo "No Python files to scan" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Dependency Vulnerability Summary
          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "## ⚠️ Dependency Vulnerabilities (safety)" >> $GITHUB_STEP_SUMMARY
              echo "Found $VULN_COUNT vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ✅ Dependency Vulnerabilities (safety)" >> $GITHUB_STEP_SUMMARY
              echo "No vulnerable dependencies found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ✅ Dependency Vulnerabilities (safety)" >> $GITHUB_STEP_SUMMARY
            echo "No dependency files to scan" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Summary Table
          echo "## 📊 Security Scan Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Individual job status
          if [ "${{ needs.gitleaks-scan.result }}" == "success" ]; then
            echo "| Secrets Detection | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secrets Detection | ❌ | Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.python-security.result }}" == "success" ]; then
            echo "| Python Security | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Python Security | ⚠️ | Issues Found |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "| Dependency Scan | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dependency Scan | ⚠️ | Issues Found |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Determine overall result
        id: determine-result
        run: |
          # Security scan fails only if gitleaks fails (critical security issue)
          # Other security issues are warnings but don't fail the workflow
          if [ "${{ needs.gitleaks-scan.result }}" != "success" ]; then
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "result=success" >> $GITHUB_OUTPUT
          fi
