name: Code Lint

on:
  workflow_call:
    outputs:
      yaml-lint-result:
        description: "Result of YAML linting"
        value: ${{ jobs.lint-summary.outputs.yaml-lint-result }}
      shell-lint-result:
        description: "Result of shell script linting"
        value: ${{ jobs.lint-summary.outputs.shell-lint-result }}
      ansible-lint-result:
        description: "Result of Ansible linting"
        value: ${{ jobs.lint-summary.outputs.ansible-lint-result }}
      overall-result:
        description: "Overall linting result"
        value: ${{ jobs.lint-summary.outputs.overall-result }}

permissions:
  actions: read
  contents: read
  checks: write

jobs:
  yaml-lint:
    name: YAML Validation
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.lint.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Run yamllint
        id: lint
        run: |
          echo "📝 Linting YAML files with yamllint..."
          yamllint -c .yamllint.yml -f parsable . > yamllint-report.txt 2>&1 || true

          if [ -f yamllint-report.txt ] && [ -s yamllint-report.txt ]; then
            ISSUE_COUNT=$(wc -l < yamllint-report.txt)
            echo "YAML lint found $ISSUE_COUNT issues"
            echo "First 20 issues:"
            head -20 yamllint-report.txt
          else
            echo "No YAML lint issues found"
            touch yamllint-report.txt  # Create empty file
          fi
        continue-on-error: true

      - name: Upload yamllint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yamllint-report
          path: yamllint-report.txt
          retention-days: 3

  shell-lint:
    name: Shell Script Validation
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.lint.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run shellcheck
        id: lint
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: .venv .git
          ignore_names: node_modules
          additional_files: 'scripts'
        continue-on-error: true

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    outputs:
      result: ${{ steps.lint.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .cache/pip
            .venv
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
            pip-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python --version
          pip --version
          pip install virtualenv
          virtualenv .venv
          source .venv/bin/activate
          pip install ansible ansible-lint

      - name: Run ansible-lint
        id: lint
        run: |
          source .venv/bin/activate
          echo "🔧 Linting Ansible playbooks with ansible-lint..."
          ansible-lint --exclude .venv -f parsable > ansible-lint-report-${{ matrix.python-version }}.txt 2>&1 || true

          if [ -f ansible-lint-report-${{ matrix.python-version }}.txt ] && [ -s ansible-lint-report-${{ matrix.python-version }}.txt ]; then
            ISSUE_COUNT=$(wc -l < ansible-lint-report-${{ matrix.python-version }}.txt)
            echo "Ansible lint (Python ${{ matrix.python-version }}) found $ISSUE_COUNT issues"
          else
            echo "No Ansible lint issues found (Python ${{ matrix.python-version }})"
          fi
        continue-on-error: true

      - name: Upload ansible-lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ansible-lint-report-${{ matrix.python-version }}
          path: ansible-lint-report-${{ matrix.python-version }}.txt
          retention-days: 3

  lint-summary:
    name: Linting Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, shell-lint, ansible-lint]
    if: always()
    outputs:
      yaml-lint-result: ${{ needs.yaml-lint.outputs.result }}
      shell-lint-result: ${{ needs.shell-lint.outputs.result }}
      ansible-lint-result: ${{ needs.ansible-lint.result }}
      overall-result: ${{ steps.determine-result.outputs.result }}

    steps:
      - name: Download all linting reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*lint-report*"
          merge-multiple: true

      - name: Determine overall result
        id: determine-result
        run: |
          # Linting issues are generally warnings, not failures
          # Only fail if there are severe issues that prevent proper functioning
          if [ "${{ needs.ansible-lint.result }}" == "failure" ]; then
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "❌ Critical Ansible linting issues found"
            exit 1
          else
            echo "result=success" >> $GITHUB_OUTPUT
            echo "✅ Linting completed - issues are warnings only"
          fi
