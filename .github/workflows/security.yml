name: Security Scan

on:
  workflow_call:
    outputs:
      gitleaks-result:
        description: "Result of gitleaks scan"
        value: ${{ jobs.gitleaks-scan.outputs.result }}
      python-security-result:
        description: "Result of Python security scan"
        value: ${{ jobs.python-security.outputs.result }}
      dependency-scan-result:
        description: "Result of dependency vulnerability scan"
        value: ${{ jobs.dependency-scan.outputs.result }}

permissions:
  actions: read
  contents: read
  security-events: write
  checks: write

jobs:
  gitleaks-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.scan.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install gitleaks
        run: |
          # Dynamically fetch the latest gitleaks version
          LATEST_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep -Po '"tag_name": "\K[^"]*')
          echo "Installing gitleaks ${LATEST_VERSION}..."

          # Download the latest Linux x64 binary
          curl -sL https://api.github.com/repos/gitleaks/gitleaks/releases/latest | \
            grep -oP '"browser_download_url": "\K[^"]*linux_x64\.tar\.gz' | \
            head -1 | xargs -I {} wget -q -O gitleaks.tar.gz {}

          # Extract and set up gitleaks
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          echo "$(pwd)" >> $GITHUB_PATH
          ./gitleaks version

      - name: Run gitleaks secrets scan
        id: scan
        run: |
          echo "🔍 Scanning for secrets with gitleaks..."
          ./gitleaks detect --source . --verbose --config .gitleaks.toml --report-format json --report-path gitleaks-report.json
        continue-on-error: false

      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 3

  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.security-check.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit

      - name: Run bandit security scan
        id: security-check
        run: |
          echo "🐍 Scanning Python files with bandit..."
          find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" > python-files.txt
          if [ -s python-files.txt ]; then
            bandit -r -f json -o bandit-report.json $(cat python-files.txt) || true
            if [ -f bandit-report.json ]; then
              echo "Bandit scan completed. High/Medium severity issues:"
              cat bandit-report.json | jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM")' || echo "No high/medium security issues found"
            fi
          else
            echo "No Python files found to scan"
            echo "[]" > bandit-report.json
          fi
        continue-on-error: true

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: |
            bandit-report.json
            python-files.txt
          retention-days: 3

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.dependency-check.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: |
          pip install safety

      - name: Run safety dependency scan
        id: dependency-check
        run: |
          echo "🔒 Checking Python dependencies with safety..."
          if [ -f requirements.txt ] || [ -f setup.py ] || [ -f pyproject.toml ]; then
            safety check --json --output safety-report.json || true
            if [ -f safety-report.json ]; then
              echo "Safety scan completed. Critical vulnerabilities:"
              cat safety-report.json | jq '.vulnerabilities[] | select(.vulnerability.severity == "high")' || echo "No critical vulnerabilities found"
            fi
          else
            echo "No Python dependency files found to scan"
            echo '{"vulnerabilities": []}' > safety-report.json
          fi
        continue-on-error: true

      - name: Upload safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 3
